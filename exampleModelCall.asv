% Example of calling the urbanTreesMgr function.
%
% Syntax:  exampleModelCall
%
% Inputs:
%   none
%
% Outputs:
%   none
%
% Example:
%   exampleModelCall
%   This example runs a calls the urbanTreesMgr function for a
%   single urban epidemic simulation run.
%
% Other m-files required: urbanTreesMgr.m
% Subfunctions: none
% MAT-files required: none
%
% See also: none
%
% Author: Eleftherios Avramidis
% Update: Cerian 
% Email: el.avramidis@gmail.com
% Copyright: MIT License
% Date: 20/10/2020
% Version: 2.0


TopLevel = 'D:\Cerian\OneDrive - University Of Cambridge';
LocalPath = [TopLevel,'\UrbanTreeModel\ModelCodeForPublic2023\UrbanE[iModelFinalAugust2019\UrbanEpidemicModel\urbanEpidemicModel\'];
addpath([LocalPath,'core']);
addpath([LocalPath,'plotting']);
addpath([LocalPath,'dataPrepare\SyntheticLandscapes']);

addpath(LocalPath)
%% These five parameters determine the specific model run and filename stored in
% clear variables % commented out if using multirun script
ParameterGroup = PG; %8; % select set of parameters using in simulation see parameterSets.mlx - if no road spread need to start in garden adn vice verssa
InputSet = IS; %1; % Landscape choice
StartPosGp = SpG; %2; % to find a suitable start position can use chooseStartLocation.m 1 = central, 2 = south-east
StartPositionMethod  = SpM; %4; % 4 is a road cell, 5 is a park/garden cell
NumReps = NumReps; % number of times to run model for given set of inputs
%%  Load landscape
[Assumption, LandscapeType, HostLandscapeNumber] = HostLandscapeList(InputSet);


switch StartPosGp
    case 1 %central location
        RoadSegment = 18346;
        GardenCell = 4235;
    case 2 % south east near new housing estate
        RoadSegment = 14757;
        GardenCell = 6571;
    case 3 % west in area where lots of oaks in ICD on road and in park
        RoadSegment = 7555;
        GardenCell = 1772;
    case 4 % south by estuary
        RoadSegment = 77;
        GardenCell = 3570;
end


landscapeName = ['synth_',LandscapeType,'_',Assumption,'_',num2str(HostLandscapeNumber),'_UrbanLandscape'];
load([landscapeName '.mat'])
cd([LocalPath,'SimulationOutput'])



%% Plot landscape
% plotUrbanLandscape(landscapeName)

%% Set epidemiological model parameters
% Please see core\urbanTreesSet.m for description of each parameter

% opts = urbanTreesSet();
% function containing different parameter combinations
opts = parameterSets(ParameterGroup);
% add record of landscape name to output file
opts.LandscapeName = landscapeName;

opts.tSpan = 500; % time to run model over
opts.tInterval = 1;
opts.roadsideTreesON=1;
opts.parkbackyardTreesON=1;

    
%% create a directory in which to store model output

if opts.roadsideTreesON == 1 & opts.parkbackyardTreesON ==1
mkdir(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber), Assumption(1:4),'Start',num2str(StartPosGp),'_',num2str(StartPositionMethod)])
cd(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber),Assumption(1:4),'Start',num2str(StartPosGp),'_',num2str(StartPositionMethod)])
elseif opts.roadsideTreesON == 1 & opts.parkbackyardTreesON ==0
mkdir(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber),Assumption(1:4),'Start',num2str(StartPosGp),'ParkOff'])
cd(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber),Assumption(1:4),'Start',num2str(StartPosGp),'ParkOff'])
elseif opts.roadsideTreesON == 0 & opts.parkbackyardTreesON ==1
mkdir(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber),Assumption(1:4),'Start',num2str(StartPosGp),'RoadOff'])
cd(['ParGp',num2str(ParameterGroup),LandscapeType,num2str(HostLandscapeNumber),Assumption(1:4),'Start',num2str(StartPosGp),'RoadOff'])
else
   disp('Check parameter settings for opts.roadsideTreesON, opts.parkbackyardTreesON');
end    
%%  Choose the start of the epidemic simulation
% can either start in a garden patch or a road patch or in multiple
% locations.
% set method by choosing case and assigning value to StartPositionMethod
% cases
% 1 = random park cell
% 2 = random road segment
% 3 = random both
% 4 = specified road segment
% 5 = specified park segment
% e.g. StartPositionMethod  = 5; Assigned before create directory so can
% use info in directory name

% Create list of all road segments with trees
populatedroads = find(urbanLandscape.roadpopulation);
% Create list of all garden patches with trees
populatedtiles = find(urbanLandscape.parkpopulation);

% randomly generate location of introduction of disease/pest from all
% possible locations with trees: 
startPopulatatedRoadSegment = randi(numel(populatedroads)); % pick a position from the list of population roads 
StartRoadID = populatedroads(startPopulatatedRoadSegment);
startPopulatedCell = randi(numel(populatedtiles));
StartCellID = populatedtiles(startPopulatedCell);


    switch StartPositionMethod
        case 1
    % Start on random park cell
    opts.startCell = StartCellID;
    opts.startRoadSegment = 0;
        case 2
            % start on random road patch
              opts.startRoadSegment = StartRoadID;
              opts.startCell = 0;
        case 3
            % seed on road and park cell (randomly selected)
            opts.startCell = StartCellID;
            opts.startRoadSegment = StartRoadID;
        case 4
            % specify start road cell, no park cell
            opts.startCell = 0;
            opts.startRoadSegment = RoadSegment; % specified in start case statement
        case 5
            % specify start park cell, no road cell
            opts.startCell = GardenCell; %specified in start case statement
            opts.startRoadSegment = 0;
    end

%% set up normalising values
% tic
C_air=0;    % if C_air==0 then it will be calculated by the simulator and stored in C_air.mat
C_road=0;   % if C_air==0 then it will be calculated by the simulatorand stored in C_road.mat
% pre-calculate normalising constants - need to do for each new landscape
% used;
% function in ...\core\normalise_kernels.m
cell_size = abs(urbanLandscape.gridcenters(1,2)-urbanLandscape.gridcenters(2,2));

[C_air, C_road]=normalise_kernels(urbanLandscape.G, ...
opts.p_air, opts.p_road, opts.alpha_air, opts.alpha_road, ...
opts.d_max_air, opts.d_max_road, cell_size, opts.max_roadSegment_length);

 load('C_air.mat')     % load C_air values
 load('C_road.mat')    % load C_road values
%% call the model: to run multiple times uncomment parfor and associated end.
% to run multiple times uncomment "parfor" and "end" statments
for i=1:NumReps
    % replicates on one landscape
    %i = 5000; % comment out this line for multiple runs
    urbanTreesMgr( [landscapeName '.mat'], opts, ['simOut_' num2str(i)], C_air, C_road);
end
% elapsed = toc;
% disp(['Time elapsed (s): ', num2str(elapsed)])
load chirp
sound(y,Fs/3)
